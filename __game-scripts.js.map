{"version":3,"sources":["scripts/auto-ortho-camera.js","scripts/player.js","scripts/fitcolider.js","enemy.js"],"names":[],"mappings":"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","sourcesContent":["// auto-ortho-camera.js\nvar AutoOrthoCamera = pc.createScript('autoOrthoCamera');\n\n\nvar PIXEL_PER_UNIT = 100;\n\n/**\n * AutoOrthoCamera\n * ---\n * On initialize and when ever the window is resized, this script calculates the correct \n * position and orthoHeight values for the camera so that it renders the scene at pixel perfect ratio\n **/\nAutoOrthoCamera.prototype.initialize = function() {\n    this.app.graphicsDevice.on('resizecanvas', this.resize, this);\n    this.resize(this.app.graphicsDevice.width, this.app.graphicsDevice.height);\n    \n    // enable pixel snapping on sprite material\n    // TODO: make this a proper option on the sprite system\n    this.app.systems.sprite.defaultMaterial.pixelSnap = true; \n};\n\nAutoOrthoCamera.prototype.resize = function(width, height) {\n    this.entity.camera.orthoHeight = height / (PIXEL_PER_UNIT * 2);\n    var p = this.entity.getLocalPosition();\n    p.y = this.entity.camera.orthoHeight;\n    this.entity.setLocalPosition(p);\n};\n\n\n","// player.js\nvar Player = pc.createScript('player');\n\nvar WALK_VEL = 1500;\nvar JUMP_VEL = 600;\n\n//物理エンジンにリプレイスするため削除\n//var GRAVITY = 15;\n//var GROUND_HEIGHT = 0;\n\n\nPlayer.prototype.initialize = function() {\n    this.state = 'idle';\n    this.direction = 'left';\n    this.vel = new pc.Vec2();\n    this.falling = false;\n    \n    //接地判定\n    this.entity.collision.on(\"collisionstart\",this._colstart,this);\n};\n\n\nPlayer.prototype.update = function(dt) {\n    // listen for keyboard inputs\n    // WASDに加えてアローキーも追加\n    if (this.app.keyboard.isPressed(pc.KEY_A) || this.app.keyboard.isPressed(pc.KEY_LEFT)) {\n        this.walkLeft();\n    } else if (this.app.keyboard.isPressed(pc.KEY_D) || this.app.keyboard.isPressed(pc.KEY_RIGHT)) {\n        this.walkRight();   \n    }else if(!this.falling && this.state != \"damage\"){\n        this.idle();\n    }\n        \n    if (this.app.keyboard.wasPressed(pc.KEY_W) || this.app.keyboard.wasPressed(pc.KEY_UP)) {\n        this.jump();\n    }\n    \n    if(this.entity.sprite._currentClip.name == \"damage\"){\n        if (!this.entity.sprite._currentClip.isPlaying){\n            this.idle();\n        }\n    }\n};\n\nPlayer.prototype._colstart = function(ev){\n    //groundに接地したらidleにする\n    if(ev.other.tags.has('ground')){\n        this.falling = false;\n        this.idle();\n    }\n};\n\nPlayer.prototype.idle = function () {\n    if (this.state !== 'idle') {\n        this.entity.sprite.play('idle');\n        this.state = 'idle';\n    }\n};\n\nPlayer.prototype.jump = function () {\n    if (this.state !== 'jump') {\n        this.entity.sprite.play('jump');\n        this.state = 'jump';\n        //y軸に衝撃を与える\n        this.entity.rigidbody.applyImpulse(0,JUMP_VEL,0);\n        this.falling = true;\n    }\n};\n    \nPlayer.prototype.setDirection = function(dir) {\n    this.direction = dir;\n    this.entity.sprite.flipX = (dir === 'right');\n};\n\n\nPlayer.prototype.walkLeft = function() {\n    if (this.state === 'idle' || this.state === 'walkright') {\n        this.entity.sprite.play('run');\n        if (this.direction !== 'left') {\n            this.setDirection('left');\n        }\n        this.state = 'walkleft';\n    }\n    \n    if (this.state === 'walkleft' && !this.falling) {  \n        this.entity.rigidbody.applyForce(-WALK_VEL,0,0);\n    }\n};\n\nPlayer.prototype.walkRight = function() {\n    if (this.state === 'idle' || this.state === 'walkleft') {\n        this.entity.sprite.play('run');\n        if (this.direction !== 'right') {\n            this.setDirection('right');\n        }\n        \n        this.state = 'walkright';\n    }\n    \n    if (this.state === 'walkright' && !this.falling) {\n        this.entity.rigidbody.applyForce(WALK_VEL,0,0);\n    }\n};\n\nPlayer.prototype.swap = function(old) {\n    this.state = old.state;\n    this.direction = old.direction;\n    this.vel = old.vel;\n    this.falling = old.falling;\n};\n\nPlayer.prototype.damage = function(){\n    this.state = 'damage';\n    this.entity.sprite.play('damage');\n    this.entity.rigidbody.applyImpulse(new pc.Vec3((this.direction == \"left\")?-100 : 100,30,0));\n};\n\n","// fitcolider.js\n//x軸方向のみhalf extentsを合わせる\nvar Fitcolider = pc.createScript('fitcolider');\n\n// initialize code called once per entity\nFitcolider.prototype.initialize = function() {\n    this.scale = this.entity.getLocalScale();\n    this.width = this.entity.sprite._width;\n    this.newHalfExtents = this.entity.collision.halfExtents.clone();\n    this.newHalfExtents.x = this.scale.x * this.width / 2;\n    this.entity.collision.halfExtents = this.newHalfExtents;\n};\n\n// update code called every frame\nFitcolider.prototype.update = function(dt) {\n    \n};\n\n// swap method called for script hot-reloading\n// inherit your script state here\n// Fitcolider.prototype.swap = function(old) { };\n\n// to learn more about script anatomy, please read:\n// http://developer.playcanvas.com/en/user-manual/scripting/\n\n","// enemy.js\nvar Enemy = pc.createScript('enemy');\n/*attributesに右、左それぞれの移動量を定義*/\nEnemy.attributes.add(\"RIGHT_MOVE\",{type:\"number\",default:0.01});\nEnemy.attributes.add(\"LEFT_MOVE\",{type:\"number\",default:-0.01});\n\n// initialize code called once per entity\nEnemy.prototype.initialize = function() {\n    /*カウンタ初期化*/\n    this.count = 0;\n    /*左右移動を変更するインターバル*/\n    this.change_interval = parseInt(50 + Math.random() * 20,10);\n    /*どちらに進むか*/\n    this.movefor = (Math.random() > 0.4)? this.RIGHT_MOVE : this.LEFT_MOVE;\n   \n    /*衝突した際のイベントハンドラ*/\n    this.entity.collision.on(\"collisionstart\",this._colstart,this);\n\n    /*死んだかどうか*/\n    this.isdie = false;\n};\n\n// update code called every frame\nEnemy.prototype.update = function(dt) {\n    if(!this.isdie){//生きている状態\n        /*毎フレーム加算する*/\n        this.count ++;\n\n        /*インターバルごとに向きをランダムで変更する*/\n        if(this.count % this.change_interval === 0){\n            this.movefor = (Math.random() > 0.4)? this.RIGHT_MOVE : this.LEFT_MOVE;\n        }\n\n        /*指定した方向へ移動*/\n        this.entity.translate(this.movefor,0,0);\n\n        /*移動方向に合わせてspriteの向きを変更*/\n        this.setDirection(this.movefor);\n     }else{//死んでいる状態\n        if (!this.entity.sprite._currentClip._playing){//現在再生しているclipの再生が終了したら\n            /*自分自身を削除する*/\n            this.entity.destroy();\n        }\n    }\n};\n\n/*ベクトルに応じてspriteの向きを変更するメソッド　引数:x軸の移動量*/\nEnemy.prototype.setDirection = function(accu) {\n    this.entity.sprite.flipX = (accu < 0);\n};\n\n/*衝突した瞬間に呼ばれるコールバック*/\nEnemy.prototype._colstart = function(ev){\n    if(ev.other.tags.has(\"player\")){//衝突したentityが\"player\"tagを所持していたら\n        /*playerと自分自身の距離*/\n        var distance = ev.other.getLocalPosition().clone().sub(this.entity.getLocalPosition().clone());\n        if(distance.y > 0.7){//上からぶつかった\n            /*自分自身が死ぬ*/\n            this.die();\n        }else{//横からぶつかった\n            /*playerのスクリプトからdamage()メソッドを呼び出す*/\n            ev.other.script.player.damage();\n        }\n    }\n};\n\n/*自分自身が死ぬときの処理 */\nEnemy.prototype.die = function(){\n    /*isdieフラグを立たせる*/\n    this.isdie = true;\n    /*RigidbodyとCollisionを切る*/\n    this.entity.rigidbody.enabled = false;\n    this.entity.collision.enabled = false;\n    /*deathのアニメーションクリップを再生*/\n    this.entity.sprite.play(\"death\");\n};\n\n"]}